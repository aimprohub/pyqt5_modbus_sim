# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'read_write_Modbus.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time

from PyQt5 import QtCore, QtGui, QtWidgets 
from pyModbusTCP.client import ModbusClient

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(540, 421)
        MainWindow.setStyleSheet("background-color: rgb(235, 240, 230);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(380, 60, 121, 31))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(210, -10, 201, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(85, 0, 255);")
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 60, 121, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(230, 60, 121, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 40, 101, 20))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(260, 40, 41, 16))
        self.label_3.setObjectName("label_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 310, 110, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(290, 310, 111, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(50, 260, 451, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(110, 230, 113, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(50, 230, 60, 16))
        self.label_4.setObjectName("label_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(380, 140, 121, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(260, 150, 70, 17))
        self.checkBox.setObjectName("checkBox")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(80, 150, 121, 31))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(110, 140, 51, 16))
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 540, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pushButton.clicked.connect(self.write_modbus)
        self.pushButton_4.clicked.connect(self.write_coil)
        self.pushButton_2.clicked.connect(self.read_coil)
        self.pushButton_3.clicked.connect(self.read_holding_reg)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Write Register"))
        self.label.setText(_translate("MainWindow", "Tcp_Modbus:"))
        self.label_2.setText(_translate("MainWindow", "Reg Address 0 - 100"))
        self.label_3.setText(_translate("MainWindow", "Value"))
        self.pushButton_2.setText(_translate("MainWindow", "Read Coil"))
        self.pushButton_3.setText(_translate("MainWindow", "Read Holding Reg"))
        self.lineEdit_4.setText(_translate("MainWindow", "0"))
        self.label_4.setText(_translate("MainWindow", "Start add"))
        self.pushButton_4.setText(_translate("MainWindow", "Write Coil"))
        self.checkBox.setText(_translate("MainWindow", "True"))
        self.label_5.setText(_translate("MainWindow", "Coil add"))

    def write_modbus(self):
        address= self.lineEdit.text()
        value= self.lineEdit_2.text()
        print (value)
        if c.write_single_register(int(address), int(value)):
            print("write ok")
        else:
            print("write error")
    
    def write_coil(self):
        address= int(self.lineEdit_5.text())
        value= self.lineEdit_2.text()
        print (address)
        
        print(self.checkBox.isChecked())
        if self.checkBox.isChecked():
            print(address)
            c.write_single_coil(address, True)
        else:
            c.write_single_coil(address, False)

    def read_coil(self):  
        #value_add_st= int(self.lineEdit_4.text())
        #value_add_st=0
        #print("ok"+len(self.lineEdit_4.text()))
        if str(self.lineEdit_4.text())=="":
            #print(self.lineEdit_4.text) 
            value_add_st=0
            print("value_add_st empty")
        else:
            #value_add_st= int(self.lineEdit_4.text())
            print(self.lineEdit_4.text)
            value_add_st= int(self.lineEdit_4.text())
            coils_l = c.read_coils(value_add_st, 5) 
            #print (str(coils_l))
            myStr = str(coils_l)
            #self.lineEdit_3.setText(str(self.coils_l))
            
            self.lineEdit_3.setText(myStr)
        #else:
       #    print('unable to read coils')

            
    def read_holding_reg(self):
        regs_1=[]
        if str(self.lineEdit_4.text())=="":
            value_add_st=0
        else:
            value_add_st= int(self.lineEdit_4.text())
            regs_1 = c.read_holding_registers(value_add_st, 4)
            # if success display registers

            if regs_1:
               #print('reg ad #0 to 9: %s' % regs_1)
               myReg = ','.join(str(x) for x in regs_1)
               #print(str(regs_1 ))
               self.lineEdit_3.setText(myReg)
            else:
               print('unable to read registers')


#----------------------
if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        c = ModbusClient(host="127.0.0.1", port=8000, unit_id=1, auto_open=True, auto_close =  False)
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
